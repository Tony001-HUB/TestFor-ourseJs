1)
добавляем удаленный репозиторий
git remote add origin https://github.com/Tony001-HUB/TestFor-ourseJs.git


2)
Выход из ситуации (к примеру без комментария окошко с ~ ~ ~ ~ ) -> ctrl + c(два раза) -> :wq! 


3) ? тернарный оператор(((т.к. в его работе участвуют 3 элемента 1)условие 2)если да 3) если нет )
(num == 40) ? console.log("ok") : console.log("error")


4) +(унарный плюс) перед string делает типа num - число
+"40" 


5)callback-функции, вызываются только после определенного действия, в нашем случаее после вызова функции. К примеру 
на серваке задержка и нам надо чтобы первая функция отработала первой, а вторая за ней, но из за задержки 
может получиться наоборот и тут поможет callback -функции.

function learnJS(lang, callback){
    console.log(`я учу ${lang}`);
    callback();
}

learnJS('JS', function(){console.log('я прошёл этот урок');}); //тут анонимная функция
ИЛИ
learnJS('JS', done); //тут именная функция(БЕЗ КРУГЛЫХ СКОБОК!!!)
function done(){
    console.log(`я прошёл этот урок`);
}


6)Перебор объекта 

//где options - объект;
fot (let key in options){
	
	console.log(`Свойство ${key} имеет значение ${options[key]}`);
}


7)Перебор объекта, когда есть вложенный объект

const personalMovieDB = {
    count: numberOfFilms,
    movies: { name: ""}  //сюда достучаться
};
fot (let key in personalMovieDB){

	if(typeOf(personalMovieDB[key]) == 'object')
    {
        fot (let i in personalMovieDB[key])
        {
            console.log(`Свойство ${i} имеет значение ${options[key][i]}`);
        }
    }
    else
    {
        console.log(`Свойство ${key} имеет значение ${options[key]}`);
    }
}


8) Из объекта массив сделать 

Object.keys(nameObj);


9) Копирование объектов 1.Поверхносная копия(без вложеного объекта в объект)
//объект для копирования
const numbers = {
    a: 5,
    b: 10,
    c: 20,
    doubleNum: { //вложенный
        i: 5.5
    }
}

function copy(mainObj){
    let copyObj = {}; //объект куда копируем

    let key;
    for (key in mainObj){
        copyObj[key] = mainObj[key];
    }

    return copyObj;
}

const newNum = copy(numbers); // из numbers в newNum
newNum.a = 10; // изменяем объект 

console.log(numbers);
console.log(newNum);




10) Копирование объектов 2.Глубокая копия(с вложеным объектом в объект) БУДЕТ ПОЗЖЕ



11) Объединение двух объектов на основе одного из двух. 

Object.assign(куда, откуда); // в конец добавляет


12) Копирование объектов при помощи функции с возможностью изменения

const num = {
    a: 10
};
const clone = Object.assign({}, num); // копирование объекта в новый объект с возможностью изменения
clone.a = 20; //a = 20 

console.log(num);
console.log(clone);


13) При работе с массивами применяе функцию newArr = oldArr.slice(); (старый метод)
Новый стандарт позволяет копировать массивы таким образом: спрэд оператор ...
const video = ['leo', 'doorPop'],
      music = ['Makc krch'],
      inet = [...video, ...music]; //слияние


14) Передача в функцию параметров через массив при помощи спрэд оператор ...

function log(a, b , c){
    console.log(a);
    console.log(b);
    console.log(c);
}

const num = [2, 5 ,9];

log(...num);



15) Копирование объекта при помощи спрэд оператор ...

const q = {
    a: 'wertot'
}

const copy = {...q};



16) Варианты "наследования" у объектов свойств 

let warrior = {
    armor: 100
}

let tony = {
    attack: 500
}
tony.__proto__ = warrior; 
Object.setPrototypeOf(tony, warrior);
const john = Object.create(warrior); 


17) Динамическая типизация: 0, '', NaN, null, undef - false; Всё остальное - true; !! - к типу bool


18)Работа с событиями, отмена стандартоного поведения браузера 
const link = document.querySelectorAll('.btn');

link.addEventListener('click', (event) => {
    event.preventDefault(); //говорим, что будет по другому обрабатывать ивент кнопки
    console.log(event.target());
});


19) Получить все дочерние елементы body. 
console.log(document.body.childNodes);
ИЛИ
console.log(document.querySelector('.btn').parentNode);



20) Работа с селекторами страницы + получение следующего элемента после него 

console.log(document.querySelector('[curent-item = "3"]').nextElementSibling);



21) Дождаться полной DOM загрузки элементов
document.addEventListener('DOMContentLoaded', () => {});

